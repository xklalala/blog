/*
 Navicat Premium Data Transfer

 Source Server         : 远程博客
 Source Server Type    : MySQL
 Source Server Version : 50724
 Source Host           : 39.106.158.118:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50724
 File Encoding         : 65001

 Date: 30/05/2019 15:29:11
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for b_article
-- ----------------------------
DROP TABLE IF EXISTS `b_article`;
CREATE TABLE `b_article`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `u_id` int(11) NULL DEFAULT NULL,
  `u_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `c_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `c_title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `t_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `c_time` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `e_time` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `guidang` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `hit` int(255) NULL DEFAULT NULL,
  `status` int(1) NULL DEFAULT 1,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 25 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of b_article
-- ----------------------------
INSERT INTO `b_article` VALUES (9, 'go闭包', 1, 'xk', '24', 'go', '<p>不多说，看代码</p><pre class=\"brush:groovy;toolbar:false\">func&nbsp;AddUper()&nbsp;func(int)&nbsp;int{\n	var&nbsp;n&nbsp;int&nbsp;=&nbsp;10\n	return&nbsp;func(x&nbsp;int)&nbsp;int{\n		n&nbsp;=&nbsp;n&nbsp;+&nbsp;x\n		return&nbsp;n\n	}\n}\n\nf1&nbsp;:=&nbsp;AddUper();\nfmt.Println(f1(5))\nfmt.Println(f1(5))</pre><p>f1 = AddUper()&nbsp; 这里会初始化n的值，并保存，然后返回一个函数</p>', '', '1557831339', NULL, '2019.05', 41, 1);
INSERT INTO `b_article` VALUES (10, 'wireshark过滤器用法', 1, 'xk', '25', '工具', '<p style=\"line-height: 1.5em;\">筛选器主要在处理大量数据的时候使用，如果使用不当也会把想抓的数据筛掉</p><p style=\"line-height: 1.5em;\">筛选特定ip的数据包：<span style=\"color:#3399ea\">ip.addr==192.168.1.1</span></p><p style=\"line-height: 1.5em;\">特定端口：<span style=\"color:#3399ea\">tcp.port==80</span></p><p style=\"line-height: 1.5em;\">特定ip和端口：<span style=\"color:#3399ea\">ip.addr==192.168.1.1 and tcp.port==80</span></p><p style=\"line-height: 1.5em;\">非tcp协议的数据包：<span style=\"color:#3399ea\">!tcp</span></p><p style=\"line-height: 1.5em;\">可以使用逻辑运算符以及比较运算符</p><p style=\"line-height: 1.5em;\">抓数据包大小大于200的数据包：<span style=\"color:#3399ea\">frame.len&gt;200</span></p>', '2', '1557828955', NULL, '2019.05', 9, 1);
INSERT INTO `b_article` VALUES (11, 'TCP的握手和挥手', 1, 'xk', '26', '协议', '<p><span style=\"color: rgb(127, 127, 127);\">seq请求序列号</span></p><p><span style=\"color: rgb(127, 127, 127);\">ack确认序列号</span></p><p><span style=\"color: rgb(127, 127, 127);\">SYN、ACK表示控制位</span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"638\" src=\"https://img-blog.csdnimg.cn/20190317101955381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"613\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><br/></p><p>根据下面这三个包分析具体的握手</p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"136\" src=\"/ueditor/php/upload/image/20190514/1557829132203928.png\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background:rgba(220,220,220,0.5);background-image:url(https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png)\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"634\" src=\"https://img-blog.csdnimg.cn/2019031711043354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><br/></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"543\" src=\"https://img-blog.csdnimg.cn/20190317110943306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><br/></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"586\" src=\"https://img-blog.csdnimg.cn/20190317111455400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><br/></p><p><span style=\"color: rgb(127, 127, 127);\">四次挥手的过程跟这个类似，只是多了个FIN标记</span></p><p><span style=\"color: rgb(127, 127, 127);\">emmm，没抓到包啊</span></p><p><span style=\"color: rgb(127, 127, 127);\">太菜了</span></p><p><br/></p><p><span style=\"color: rgb(127, 127, 127);\">首先客户端向-----------&gt;服务器发送</span></p><p><span style=\"color: rgb(127, 127, 127);\">&nbsp; &nbsp; FIN标记的数据包</span></p><p><span style=\"color: rgb(127, 127, 127);\">然后服务器向-----------&gt;客户端</span></p><p><span style=\"color: rgb(127, 127, 127);\">&nbsp; &nbsp;返回一个ACK包</span></p><p><span style=\"color: rgb(127, 127, 127);\">&nbsp; &nbsp;再返回一个FIN标记的包</span></p><p><span style=\"color: rgb(127, 127, 127);\">最后客户端-----------&gt;服务器</span></p><p><span style=\"color: rgb(127, 127, 127);\">&nbsp; 返回一个确认断开连接的包</span></p><p><br/></p><p><span style=\"color: rgb(127, 127, 127);\">A:我要走了</span></p><p><span style=\"color: rgb(127, 127, 127);\">B:收到</span></p><p><span style=\"color: rgb(127, 127, 127);\">B:你真的要走吗</span></p><p><span style=\"color: rgb(127, 127, 127);\">A:真的</span></p><p><br/></p>', '2', '1557829179', NULL, '2019.05', 10, 1);
INSERT INTO `b_article` VALUES (12, 'nmap IP地址欺骗', 1, 'xk', '25', '工具', '<p>首先ip欺骗语法如下：</p><p>nmap -D [ip1, ip2, ip3, ip4.......|RND:number] [目标ip]</p><p>使用-D选项可以指定多个ip地址，或者使用RND随机生成多个地址；</p><p>使用这个命令可可能会让目标主机管理员认为该扫描使用的是诱饵主机进行扫描的，而不是真实的扫描地址，因此会忽略这次扫描，从而，我们可以可以使用自己真实的ip地址进行扫描，以达到欺骗目标主机管理员的目的</p><p>这里进行报文分析</p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"162\" src=\"/ueditor/php/upload/image/20190514/1557836409548985.png\" width=\"1160\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p>可以看出，这里是使用SYN扫描，表示端口处于开放状态</p><p>再看看80端口，由下面的图分析可以得知80端口处于关闭状态</p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"164\" src=\"/ueditor/php/upload/image/20190514/1557836409550247.png\" width=\"1138\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p>源ip欺骗方法</p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_focused cke_widget_selected\"><img alt=\"\" height=\"553\" src=\"https://img-blog.csdnimg.cn/20190329193418401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1171\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p>', '2', '1557836421', NULL, '2019.05', 6, 1);
INSERT INTO `b_article` VALUES (13, 'Wamp错误解决方法', 1, 'xk', '27', 'apache', '<p>因为挺多人经常问我wampserver不变绿，还有安装的时候缺少dll，这里就介绍一下：</p><p>首先php：php是基于c语言的，所以运行环境需要VC库：链接：<a href=\"https://pan.baidu.com/s/1Ll0IB8g0udw2qQuc8sL-hg\">https://pan.baidu.com/s/1Ll0IB8g0udw2qQuc8sL-hg</a>&nbsp;<br/>提取码：dxka&nbsp;<br/>复制这段内容后打开百度网盘手机App，操作更方便哦<br/>安装对应php需要的vc版本，不知道的你就全部装吧</p><p>然后mysql，mysql一般也不会出什么事，最多3306端口被占，改成3307就行了</p><p><br/></p><p>最后apache，这个也简单，管理员打开cmd去apache的bin目录</p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"300\" src=\"https://img-blog.csdnimg.cn/20190324135346292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1182\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"647\" src=\"https://img-blog.csdnimg.cn/20190324135506151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"647\" src=\"https://img-blog.csdnimg.cn/20190324135758820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background:rgba(220,220,220,0.5);background-image:url(https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png)\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"228\" src=\"https://img-blog.csdnimg.cn/20190324140051568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background:rgba(220,220,220,0.5);background-image:url(https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png)\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"354\" src=\"https://img-blog.csdnimg.cn/20190324140703773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background:rgba(220,220,220,0.5);background-image:url(https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png)\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"567\" src=\"https://img-blog.csdnimg.cn/20190324140934739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1064\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"378\" src=\"https://img-blog.csdnimg.cn/20190324141252692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected\"><img alt=\"\" height=\"646\" src=\"https://img-blog.csdnimg.cn/20190324141320818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p><p><span class=\"cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_focused cke_widget_selected\"><img alt=\"\" height=\"507\" src=\"https://img-blog.csdnimg.cn/20190324141502193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTgwNjkx,size_16,color_FFFFFF,t_70\" width=\"1200\" class=\"has cke_widget_element\"/><span class=\"cke_reset cke_widget_drag_handler_container\" style=\"background: url(&quot;https://csdnimg.cn/release/blog_editor_html/release1.3.9/ckeditor/plugins/widget/images/handle.png&quot;) rgba(220, 220, 220, 0.5); top: -15px; left: 0px; display: block;\"></span><span class=\"cke_image_resizer\"></span></span></p>', '2', '1552838400', NULL, '2019.03', 16, 1);
INSERT INTO `b_article` VALUES (14, 'php7操作mongodb', 1, 'xk', '23', 'php', '<p>具体安装mongodb和php的mongodb的扩展这里就不说了。</p><p>根据官网得知</p><p><span style=\"border: 1px solid rgb(0, 0, 0); color: rgb(0, 176, 240);\"><strong>1.连接数据库</strong></span></p><pre class=\"brush:php;toolbar:false\">//连接数据库使用\nnew&nbsp;MongoDB\\Driver\\Manager(&quot;mongodb://myusername:mypassword@example.com/mydatabase&quot;);</pre><p>在官方文档中也没看到关闭数据库的连接，个人猜测应该是内置在析构函数里面吧</p><p><span style=\"color: rgb(0, 176, 80);\">然后对数据库的操作是在BulWrite类中</span></p><p><span style=\"border: 1px solid rgb(0, 0, 0);\"><strong><span style=\"border: 1px solid rgb(0, 0, 0); color: rgb(0, 176, 240);\">2.操作数据库</span></strong></span></p><pre class=\"brush:php;toolbar:false\">$bulk&nbsp;=&nbsp;new&nbsp;MongoDB\\Driver\\BulkWrite([&#39;ordered&#39;&nbsp;=&gt;&nbsp;true]);//默认接下来的操作是有序执行发送到服务端。默认为true\n\n//插入操作\n$bulk-&gt;insert([&#39;name&#39;=&gt;&#39;lalala&quot;,&nbsp;&#39;gender&#39;=&gt;&#39;man&#39;]);\n$bulk-&gt;insert([&#39;name&#39;=&gt;&#39;xk&#39;,&nbsp;&#39;gender&#39;=&gt;&#39;man&#39;]);\n$bulk-&gt;insert([&#39;name&#39;=&gt;&#39;lalala&#39;,&nbsp;&#39;gender&#39;=&gt;&#39;woman&#39;]);\n\n//写入到数据库\n$result&nbsp;=&nbsp;$manager-&gt;executeBulkWrite(&#39;db.collection&#39;,&nbsp;$bulk);//db：数据库名，&nbsp;collection：集合名\n\n//更新操作\n\n$bulk-&gt;update([&#39;name&#39;=&gt;2],&nbsp;[&#39;$set&#39;=&gt;[&#39;gender&#39;=&gt;&#39;wonam&#39;],&nbsp;[&#39;multi&#39;=&gt;false,&nbsp;&#39;upsert&#39;=&gt;false]);\n//multi：默认为false，匹配第一个，如果是true，就匹配所有的\n//upsert：默认为false,如果没有匹配到，不插入。如果为true，没有匹配到将会插入数据\n\n//删除操作\n$bulk-&gt;delete([&#39;name&#39;=&gt;&#39;lalala&#39;],[&#39;limit&#39;=&gt;false]);//limit：默认false，删除所有匹配到的，true：删除第一个匹配到的\n\n\n//在bulk完成操作之后，使用manager的executeBulkWrite()方法向数据库执行操作</pre><p><br/></p>', '2', '1557896268', NULL, '2019.05', 7, 1);
INSERT INTO `b_article` VALUES (15, 'iptables', 1, 'xk', '25', '工具', '<p style=\"line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">来源：<a href=\"https://www.bilibili.com/medialist/play/ml149552765\">https://www.bilibili.com/medialist/play/ml149552765</a></span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">iptables</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">netfilter/iptables:&nbsp; ip 信息包过滤系统，实际上由两个组件 <span style=\"font-size: 18px; font-family: 楷体, 楷体_GB2312, SimKai; color: rgb(0, 176, 240);\">netfilter </span>和 <span style=\"font-size: 18px; font-family: 楷体, 楷体_GB2312, SimKai; color: rgb(0, 176, 240);\">iptables </span>组成</span></p><p><br/></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"font-size: 18px; font-family: 楷体, 楷体_GB2312, SimKai; color: rgb(84, 141, 212);\">netfilter组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的则集。</span></span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"font-size: 18px; font-family: 楷体, 楷体_GB2312, SimKai; color: rgb(149, 55, 52);\">iptables组件是一种工具，也称为用户空间（userspace）， 它使插入、修改和除去信息包过滤表中的规则变得容易</span></span></p><p><span style=\"color: rgb(149, 55, 52); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\"><br/></span></p><p><span style=\"color: rgb(0, 0, 0); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">netfilter/iptables 后期简称为：iptables。 iptables是基于内核的防火墙，功能非常强大，iptables内置了filter，net和mangle三张表</span></p><p><span style=\"color:#953734\"><br/></span></p><p style=\"line-height: 1.75em;\"><span style=\"color:#953734\">filter负责过滤数据包，包括的规则有input，output，forward</span></p><p style=\"line-height: 1.75em;\"><span style=\"color:#953734\">nat则涉及到网络地址转换，包括的规则有，prerouting，postrouting和output</span></p><p style=\"line-height: 1.75em;\"><span style=\"color: rgb(149, 55, 52);\">mangle表则主要应用在修改数据包的内容上，用来做流量整型的，给数据包打个标识，默认的规则链有 input，output，NAT，postrouting，prerouting</span></p><p style=\"line-height: 1.75em;\"><span style=\"color: rgb(118, 146, 60);\"><br/></span></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(0, 112, 192);\">input&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"color: rgb(118, 146, 60);\">匹配目标ip是本机的数据包</span></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(0, 112, 192);\">output&nbsp; &nbsp; &nbsp; &nbsp; </span><span style=\"color: rgb(118, 146, 60);\">出口数据包</span></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(0, 112, 192);\">forward&nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"color: rgb(118, 146, 60);\">匹配流经本机的数据包</span></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(0, 112, 192);\">prerouting&nbsp; </span><span style=\"color: rgb(118, 146, 60);\">用来修改目的地址，用来做DNAT。如：把内网中的80端口映射到路由器外网端口上</span></p><p style=\"line-height: 1.5em;\"><span style=\"color:#953734\"><span style=\"color: rgb(0, 112, 192);\">postrouting</span><span style=\"color: rgb(118, 146, 60);\"> 用来修改源地址做SNAT。内网通过路由器nat转换功能实现通过一个公网ip上网</span></span></p><p><br/></p><p><br/></p><p><span style=\"text-decoration: underline; border: 1px solid rgb(0, 0, 0); color: rgb(0, 112, 192);\"><em><strong>iptables操作命令</strong></em></span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(49, 133, 155);\">iptables [-t 要操作的表]</span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(49, 133, 155);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;操作命令&gt;<br/></span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(49, 133, 155);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[要操作的链]<br/></span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(49, 133, 155);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[规则号码]<br/></span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(49, 133, 155);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[匹配条件]<br/></span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(49, 133, 155);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[-j 匹配到以后的动作]</span><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(146, 205, 220);\"><br/></span></p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;操作命令（-A, -I, -D, -P, -F）<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;查看命令（-[vnx]L）<br/></p><p><br/></p><p><span style=\"font-family: 隶书, SimLi; font-size: 20px; color: rgb(192, 0, 0);\">-A&lt;链名&gt;&nbsp;&nbsp;&nbsp;&nbsp;APPEND, 追加一条规则</span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px; color: rgb(49, 133, 155);\">iptables -t filter -A INPUT -j DROP&nbsp; &nbsp; &nbsp;丢弃所有进来的数据包,（</span><span style=\"color: rgb(49, 133, 155); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">拒绝所有人访问服务器</span><span style=\"color: rgb(49, 133, 155); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">）</span></p><p><span style=\"color: rgb(192, 0, 0); font-family: 隶书, SimLi; font-size: 20px;\">-D&lt;链名&gt;&nbsp; &nbsp;&lt;规则号码 | 具体规则内容&gt; DELETE, 删除一条规则</span></p><p><span style=\"color: rgb(192, 0, 0); font-family: 隶书, SimLi; font-size: 20px;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px; color: rgb(49, 133, 155);\">iptables -t filter -D INPUT 1&nbsp; &nbsp; &nbsp;丢弃所有进来的数据包,（</span><span style=\"color: rgb(49, 133, 155); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">拒绝所有人访问服务器</span><span style=\"color: rgb(49, 133, 155); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">）</span></span></p><p><span style=\"color: rgb(192, 0, 0); font-family: 隶书, SimLi; font-size: 20px;\">-A&lt;链名&gt;&nbsp;&nbsp;&nbsp;&nbsp;FLUSH, 清空规则</span></p><p><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px; color: rgb(49, 133, 155);\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px; color: rgb(49, 133, 155);\"><span style=\"color: rgb(49, 133, 155); font-family: 楷体, 楷体_GB2312, SimKai; font-size: 18px;\">iptables -F INPUT&nbsp; &nbsp;#清除input链上的规则</span></span></span></p><p><span style=\"color:#31859b;font-family:楷体, 楷体_GB2312, SimKai\"><span style=\"font-size: 18px;\">iptables -F&nbsp; #清除filter表中所有链上的规则</span></span></p>', '25', '1557991391', NULL, '2019.05', 6, 1);
INSERT INTO `b_article` VALUES (16, 'go-数组、字符串、切片', 1, 'xk', '24', 'go', '<p style=\"white-space: normal;\"><span style=\"font-size: 24px;\"><em><strong><span style=\"font-family: 楷体, 楷体_GB2312, SimKai;\">本文文章来自：</span></strong></em></span><a href=\"https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch1-basic/ch1-03-array-string-and-slice.html\" style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\">https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch1-basic/ch1-03-array-string-and-slice.html</a></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; background-color: rgb(198, 217, 240);\">Go语言的数组、字符串和切片三者是密切相关的数据结构。</span><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\">这三种数据类型，在底层原始数据有着相同的内存结构 ，在上层，因为语法的限制而有着不同的行为表现。首先，</span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; color: rgb(112, 48, 160); background-color: rgb(216, 216, 216);\">go语言的数组是一种值类型，虽然数组的元素可以被修改，但是数组本身的赋值和函数传参都是以整体复制的方式处理的。</span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; background-color: rgb(146, 205, 220);\">go语言字符串底层数据也是对应的字节数组，但字符串的只读属性禁止了底层数据的复制。</span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px; background-color: rgb(253, 234, 218);\">切片的行为更为灵活，切片的结构和字符串结构类似，但是解除了只读限制。切片的底层数据虽然也是对应数据类型的数组，但是<span style=\"color: rgb(112, 48, 160);\">每个切片还有独立的长度和容量信息</span>，切片赋值和函数传参数也是将切片头信息部分按值方式处理。因为切片头含有底层数据的指针，所以它的赋值也不会导致底层数据的复制。</span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\">其实go语言的复制和函数传参规则很简单，除了闭包函数以引用的方式对外部变量访问之外，其它赋值和函数传参都是以传值的方式处理。</span></p><h2 style=\"white-space: normal; font-size: 32px; border-bottom: 2px solid rgb(204, 204, 204); padding: 0px 4px 0px 0px; text-align: center; margin: 0px 0px 20px;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 36px;\">数组</span></h2><p style=\"white-space: normal;\"><span style=\"font-family: 隶书, SimLi; font-size: 24px;\">&nbsp; &nbsp; &nbsp; 数组是由一个固定长度的特定元素类型组成的序列，一个数组可以由零个或多个元素组成。数组的长度是数组类型的组成部分。因为数组的长度是数组类型的一个部分，不同长度的或不同类型的数据组成的数组都是不同的类型，因此在go语言中很少直接使用数组（不同长度的数组因为类型不同无法直接赋值）。数组对应的类型是切片，切片是可以动态增长和收缩的序列，切片的功能更加灵活，但是要理解切片的工作原理还是要先理解数组。<br/></span></p><p style=\"white-space: normal;\"><span style=\"border: 1px solid rgb(0, 0, 0); color: rgb(112, 48, 160); font-family: 隶书, SimLi; font-size: 24px;\"><em><strong>数组的定义</strong></em></span></p><pre class=\"brush:cpp;toolbar:false\">var&nbsp;a&nbsp;[3]int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//定义长度为3的int类型数组，元素全部为0\nvar&nbsp;b&nbsp;=&nbsp;[...]int{1,&nbsp;2,&nbsp;3}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//定义长度为3的int类型数组\nvar&nbsp;c&nbsp;=&nbsp;[...]int{2:&nbsp;3,&nbsp;1:&nbsp;2}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//定义长度为3的int类型数组，元素为0,2,3\nvar&nbsp;c&nbsp;=&nbsp;[...]int{1,&nbsp;2,&nbsp;4:&nbsp;5,&nbsp;6}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//定义长度为6的int类型数组，元素为1，&nbsp;2，&nbsp;0,&nbsp;，0，&nbsp;5，&nbsp;6</pre><p style=\"white-space: normal; line-height: 1.75em;\"><span style=\"font-size: 20px; font-family: 隶书, SimLi;\"></span><span style=\"background-color: rgb(235, 241, 221); font-size: 24px; font-family: 隶书, SimLi;\">第一种方式是定义一个数组变量的最基本方式，数组的长度明确指定，数组中的每个元素都以零值初始化</span></p><p style=\"white-space: normal; line-height: 1.75em;\"><span style=\"font-size: 24px; font-family: 隶书, SimLi; color: rgb(0, 112, 192);\">第二种方式定义数组，可以在定义的时候顺序指定全部元素的初始化值，数组的长度根据初始化元素的数目自动计算</span></p><p style=\"white-space: normal; line-height: 1.75em;\"><span style=\"font-size: 24px; font-family: 隶书, SimLi; background-color: rgb(253, 234, 218);\">第三种方式是以索引的方式来初始化数组的元素，因此元素的初始化值出现的顺序比较随意。这种初始化方式和map[int]Type 类型初始化语法类似。数组的长度以出现最大的索引为准，没有明确初始化的元素依然用0值初始化</span></p><p style=\"white-space: normal; line-height: 1.75em;\"><span style=\"font-size: 24px; font-family: 隶书, SimLi; background-color: rgb(242, 242, 242);\">第四种方式混合了第二种和第三种初始化的方式，前面两个元素采用顺序初始化，第三第四个元素零值初始化，第五个元素通过索引初始化，最后一个元素跟在前面的第五个元素后采用顺序初始化。</span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 黑体, SimHei; font-size: 24px;\">go语言中数组的值语义，一个数组变量即表示整个数组，它并不是隐式的指向第一个元素的指针（比如c语言的数组），而是一个完整的值。当一个数组变量被赋值或者被传递的时候，实际上会复制整个数组。如果数组较大的话，数组的赋值也会有较大的开始。为了避免复制数组带来的开销，可以传递一个指向数组的指针，单身数组指针并不是数组。</span></p><pre class=\"brush:cpp;toolbar:false\">var&nbsp;a&nbsp;=&nbsp;[...]int{1,&nbsp;2,&nbsp;3}&nbsp;&nbsp;&nbsp;//a是一个数组\nvar&nbsp;b&nbsp;=&nbsp;&amp;a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//b是指向数组的指针\n\nfmt.Println(a[0],&nbsp;a[1])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//打印数组的前两个元素\nfmt.Println(b[0],&nbsp;b[1])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//通过数组指针访问数组元素的方式和数组类似\n\nfor&nbsp;i,&nbsp;v&nbsp;:=&nbsp;range&nbsp;b{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//通过数组指针迭代数组的元素\n&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(i,&nbsp;v)\n}</pre><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"></span><br/></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal; line-height: 1.5em;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p style=\"white-space: normal;\"><span style=\"font-family: 楷体, 楷体_GB2312, SimKai; font-size: 20px;\"><br/></span></p><p><br/></p>', '2', '1549296000', '1558178644', '2019.02', 10, 1);
INSERT INTO `b_article` VALUES (17, 'php', 1, 'xk', '26', '协议', '<p>cd&nbsp;</p>', '1', '1552838400', NULL, '2019.03', 6, 1);
INSERT INTO `b_article` VALUES (18, 'ces ', 1, 'xk', '26', '协议', '<p>a测试测试场为长春市</p>', '2', '1558151002', '1558172923', '2019.05', 4, 0);
INSERT INTO `b_article` VALUES (19, 'php-redis', 1, 'xk', '23', 'php', '<pre class=\"brush:php;toolbar:false\">&lt;?php\nnamespace&nbsp;app\\common\\tools;\nclass&nbsp;Rds{\n	private&nbsp;static&nbsp;$redis;\n	private&nbsp;static&nbsp;$get_rds&nbsp;=&nbsp;null;\n	private&nbsp;function&nbsp;__construct(){\n		self::$redis&nbsp;=&nbsp;new&nbsp;\\Redis();\n		self::$redis-&gt;connect(&#39;127.0.0.1&#39;,&nbsp;6379);\n	}\n\n	public&nbsp;function&nbsp;set($array,&nbsp;$time=1800){\n		if(is_array($array))\n		if(count($array)&gt;0){\n			$wd&nbsp;=&nbsp;1;\n\n			//判断数组维度\n			foreach($array&nbsp;as&nbsp;$k)\n				if(is_array($k))\n					$wd&nbsp;=&nbsp;2;\n\n			foreach($array&nbsp;as&nbsp;$key=&gt;$value)\n			{\n				if($wd&nbsp;==&nbsp;2)\n				{\n					foreach($value&nbsp;as&nbsp;$k=&gt;$v)\n					{\n						self::$redis-&gt;set($k,&nbsp;$v,&nbsp;$time);\n					}\n				}\n				else\n				{\n					//&nbsp;self::$redis-&gt;set(json_encode($array));\n					return&nbsp;self::$redis-&gt;set($key,&nbsp;$value,&nbsp;$time);\n					\n				}\n			}\n		}\n		else\n			return&nbsp;null;\n	}\n\n	public&nbsp;function&nbsp;get($str)\n	{\n\n		if(is_array($str))\n		{\n			$res&nbsp;=&nbsp;[];\n			foreach($str&nbsp;as&nbsp;$value)\n			{\n				$res[$value]&nbsp;=&nbsp;self::$redis-&gt;get($value);&nbsp;\n			}\n			return&nbsp;$res;\n		}\n		else\n		{\n			return&nbsp;self::$redis-&gt;get($str);\n		}\n	}\n\n	public&nbsp;static&nbsp;function&nbsp;getRds(){\n		if(!self::$get_rds&nbsp;instanceof&nbsp;self){\n			self::$get_rds&nbsp;=&nbsp;new&nbsp;self();\n		}\n		return&nbsp;self::$get_rds;\n	}\n\n	public&nbsp;function&nbsp;del($key){\n		return&nbsp;self::$redis-&gt;del($key);\n	}\n}\n\n$redis&nbsp;=&nbsp;Rds::getRds();\n$redis-&gt;set([&#39;name&#39;=&gt;&#39;xk&#39;]);\nvar_dump($redis-&gt;get(&#39;name&#39;));\nvar_dump($redis-&gt;del(&#39;name&#39;));\nvar_dump($redis-&gt;get(&#39;name&#39;));</pre><p><br/></p>', '2', '1564416000', NULL, '2019.07', 19, 1);
INSERT INTO `b_article` VALUES (20, '转换成小写字母', 1, 'xk', '30', '字符串', '<p>题目来源&nbsp; LeetCode<br/></p><p>题目：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1em; font-size: 13px; color: rgb(51, 51, 51); font-family: &quot;Chinese Quote&quot;, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1em; font-size: 13px; color: rgb(51, 51, 51); font-family: &quot;Chinese Quote&quot;, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><img src=\"/ueditor/php/upload/image/20190525/1558769006297652.png\" title=\"1558769006297652.png\" alt=\"image.png\"/></p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20190525/1558769082245970.png\" title=\"1558769082245970.png\" alt=\"image.png\" width=\"972\" height=\"152\"/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p>', '3', '1558769018', '1558769094', '2019.05', 66, 1);
INSERT INTO `b_article` VALUES (21, 'php反射', 1, 'xk', '23', 'php', '<p>反射：在运行状态中，可以获取这个类所有的属性和方法，对于任意一个对象，都能调用它的任意一个类和方法。作用，个人比较菜，还不知道。</p><p>看代码</p><pre class=\"brush:php;toolbar:false\">&lt;?php\nclass&nbsp;Person{\n&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;$name;\n&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;$age;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;say(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$this-&gt;name.&#39;&nbsp;&nbsp;&#39;.&nbsp;$this-&gt;age.&#39;&lt;hr/&gt;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;set(string&nbsp;$name,&nbsp;int&nbsp;$age){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;age&nbsp;=&nbsp;$age;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;get($name){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isset($this-&gt;name)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$this-&gt;name;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;请设置姓名&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n$stu&nbsp;=&nbsp;new&nbsp;Person();\n$stu-&gt;set(&quot;啦啦啦&quot;,&nbsp;12);\n$stu-&gt;say();\n\n$reflect&nbsp;=&nbsp;new&nbsp;ReflectionObject($stu);\n$props&nbsp;=&nbsp;$reflect-&gt;getProperties();\nvar_dump($reflect);\nforeach&nbsp;($props&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$value)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var_dump($value-&gt;getName());\n}\n\n$method&nbsp;=&nbsp;$reflect-&gt;getMEthods();\nvar_dump($method);</pre><p><br/></p>', '', '1558950354', NULL, '2019.05', 1, 1);
INSERT INTO `b_article` VALUES (22, 'LeetCode.206.单链表反转', 1, 'xk', '32', '链表', '<p>这次php倒是出乎意料。</p><p><img src=\"/ueditor/php/upload/image/20190528/1559013138619379.png\" title=\"1559013138619379.png\" alt=\"image.png\"/></p><p><br/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1em; font-size: 13px; color: rgb(51, 51, 51); font-family: &quot;Chinese Quote&quot;, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">反转一个单链表。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1em; font-size: 13px; color: rgb(51, 51, 51); font-family: &quot;Chinese Quote&quot;, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-weight: bolder;\">示例:</span></p><pre style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; margin-top: 0px; margin-bottom: 1em; overflow: auto; background-color: rgb(247, 249, 250); padding: 10px 15px; color: rgb(38, 50, 56); line-height: 1.6; border-radius: 3px; white-space: pre-wrap;\">输入:&nbsp;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n\n输出:&nbsp;5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre><p>常规的遍历法，java和php都不说了，都是Node对象</p><p>go的话，目前go小菜鸡，刚刚查了一下才知道可以这么写</p><p><span style=\"color: #4b69c6;\">type</span> <span style=\"color: #7a3e9d;font-weight: bold;\">ListNode</span> <span style=\"color: #4b69c6;\">struct</span><span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Val <span style=\"color: #7a3e9d;\">int</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Next <span style=\"color: #777777;\">*</span>ListNode</p><p><span style=\"color: #777777;\">}</span></p><p><br/></p><p><span style=\"color: #4b69c6;\">&nbsp;&nbsp;&nbsp;&nbsp;var</span> <span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">*</span>ListNode</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">nil</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">:=</span> <span style=\"color: #aa3731;font-weight: bold;\">new</span><span style=\"color: #777777;\">(</span>ListNode<span style=\"color: #777777;\">)</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">next</span><span style=\"color: #777777;\">.</span><span style=\"color: #7a3e9d;\">Next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">nil</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">for</span> head <span style=\"color: #777777;\">!=</span> <span style=\"color: #9c5d27;\">nil</span><span style=\"color: #777777;\">{</span></p><p><span style=\"color: #777777;\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p>基本的思想都是定义两个变量 next 和 pre；不多说，看代码</p><p>=====================================================================</p><p><span style=\"color: #4b69c6;\">type</span> <span style=\"color: #7a3e9d;font-weight: bold;\">ListNode</span> <span style=\"color: #4b69c6;\">struct</span><span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Val <span style=\"color: #7a3e9d;\">int</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Next <span style=\"color: #777777;\">*</span>ListNode</p><p><span style=\"color: #777777;\">}</span></p><p><span style=\"color: #4b69c6;\">func</span> <span style=\"color: #aa3731;font-weight: bold;\">reverseList</span><span style=\"color: #777777;\">(</span>head <span style=\"color: #777777;\">*</span>ListNode<span style=\"color: #777777;\">)</span> <span style=\"color: #777777;\">*</span>ListNode <span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">if</span> head <span style=\"color: #777777;\">==</span> <span style=\"color: #9c5d27;\">nil</span> <span style=\"color: #777777;\">||</span> head<span style=\"color: #777777;\">.</span>Next <span style=\"color: #777777;\">==</span> <span style=\"color: #9c5d27;\">nil</span><span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">return</span> head</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">}</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">var</span> <span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">*</span>ListNode</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">nil</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">:=</span> <span style=\"color: #aa3731;font-weight: bold;\">new</span><span style=\"color: #777777;\">(</span>ListNode<span style=\"color: #777777;\">)</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">next</span><span style=\"color: #777777;\">.</span><span style=\"color: #7a3e9d;\">Next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">nil</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">for</span> head <span style=\"color: #777777;\">!=</span> <span style=\"color: #9c5d27;\">nil</span><span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">=</span> head<span style=\"color: #777777;\">.</span>Next</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">.</span><span style=\"color: #7a3e9d;\">Next</span> <span style=\"color: #777777;\">=</span> pre</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">=</span> head</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">head</span> <span style=\"color: #777777;\">=</span> next</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">}</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">return</span> pre</p><p><span style=\"color: #777777;\">}</span></p><p>================================================================================</p><p><span style=\"color: #7a3e9d;\"></span></p><p><span style=\"color: #7a3e9d;\">class</span> <span style=\"color: #7a3e9d;font-weight: bold;\">ListNode</span> <span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">public</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">val</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">0</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">public</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">function</span> <span style=\"color: #aa3731;font-weight: bold;\">__construct</span><span style=\"color: #777777;\">($</span><span style=\"color: #7a3e9d;\">val</span><span style=\"color: #777777;\">){$</span><span style=\"color: #9c5d27;\">this</span><span style=\"color: #777777;\">-&gt;</span><span style=\"color: #7a3e9d;\">val</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">val</span><span style=\"color: #777777;\">;}</span></p><p><span style=\"color: #777777;\">}</span></p><p><br/></p><p><span style=\"color: #7a3e9d;\">class</span> <span style=\"color: #7a3e9d;font-weight: bold;\">Solution</span><span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #7a3e9d;\">function</span> <span style=\"color: #aa3731;font-weight: bold;\">reverseList</span><span style=\"color: #777777;\">($</span><span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">)</span> <span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">if</span><span style=\"color: #777777;\">($</span><span style=\"color: #7a3e9d;\">head</span> <span style=\"color: #777777;\">==</span> <span style=\"color: #9c5d27;\">null</span> <span style=\"color: #777777;\">||</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">-&gt;</span><span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">==</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">)</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">return</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">while</span><span style=\"color: #777777;\">($</span><span style=\"color: #7a3e9d;\">head</span> <span style=\"color: #777777;\">!=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">){</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">-&gt;</span><span style=\"color: #7a3e9d;\">next</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">-&gt;</span><span style=\"color: #7a3e9d;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">pre</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">pre</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">head</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">head</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">next</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #777777;\">}</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4b69c6;\">return</span> <span style=\"color: #777777;\">$</span><span style=\"color: #7a3e9d;\">pre</span><span style=\"color: #777777;\">;</span></p><p><span style=\"color: #777777;\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #777777;\">}</span></p><p><span style=\"color: #777777;\"></span><br/></p><p>=====================================================================================</p><p><span style=\"color: #4b69c6;\">public</span>&nbsp;<span style=\"color: #7a3e9d;\">class</span> <span style=\"color: #9c5d27;\">Node</span><span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;<span style=\"color: #4b69c6;\">public</span> <span style=\"color: #7a3e9d;\">int</span> <span style=\"color: #9c5d27;\">value</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;<span style=\"color: #4b69c6;\">public</span> <span style=\"color: #9c5d27;\">Node</span> <span style=\"color: #9c5d27;\">next</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;<span style=\"color: #4b69c6;\">public</span> <span style=\"color: #aa3731;font-weight: bold;\">Node</span><span style=\"color: #777777;\">(</span><span style=\"color: #7a3e9d;\">int</span> <span style=\"color: #9c5d27;\">data</span><span style=\"color: #777777;\">)</span> <span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9c5d27;\">this</span><span style=\"color: #777777;\">.</span><span style=\"color: #9c5d27;\">value</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">data</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;<span style=\"color: #777777;\">}</span></p><p><span style=\"color: #777777;\">}</span></p><p><span style=\"color: #4b69c6;\">public</span> <span style=\"color: #9c5d27;\">Node</span> <span style=\"color: #aa3731;font-weight: bold;\">reverse</span><span style=\"color: #777777;\">(</span><span style=\"color: #9c5d27;\">Node</span> <span style=\"color: #9c5d27;\">head</span><span style=\"color: #777777;\">)</span> <span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;<span style=\"color: #9c5d27;\">Node</span> <span style=\"color: #9c5d27;\">pre</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;<span style=\"color: #9c5d27;\">Node</span> <span style=\"color: #9c5d27;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;<span style=\"color: #4b69c6;\">while</span><span style=\"color: #777777;\">(</span><span style=\"color: #9c5d27;\">head</span> <span style=\"color: #777777;\">!=</span> <span style=\"color: #9c5d27;\">null</span><span style=\"color: #777777;\">)</span> <span style=\"color: #777777;\">{</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9c5d27;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">head</span><span style=\"color: #777777;\">.</span><span style=\"color: #9c5d27;\">next</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9c5d27;\">head</span><span style=\"color: #777777;\">.</span><span style=\"color: #9c5d27;\">next</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">pre</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9c5d27;\">pre</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">head</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9c5d27;\">head</span> <span style=\"color: #777777;\">=</span> <span style=\"color: #9c5d27;\">next</span><span style=\"color: #777777;\">;</span></p><p>&nbsp;&nbsp;<span style=\"color: #777777;\">}</span></p><p>&nbsp;&nbsp;<span style=\"color: #4b69c6;\">return</span> <span style=\"color: #9c5d27;\">pre</span><span style=\"color: #777777;\">;</span></p><p><span style=\"color: #777777;\">}</span></p><p><br/></p>', '2', '1559013550', NULL, '2019.05', 6, 1);
INSERT INTO `b_article` VALUES (23, 'swoole扩展', 1, 'xk', '23', 'php', '<p>在ubuntu上安装swoole扩展</p><p>参考博客<a href=\"https://www.iphpt.com/detail/56\">https://www.iphpt.com/detail/56</a></p><p><br/></p><p>执行pecl install swoole</p><p><br/></p><p>如果没有安装pecl， unbuntu会提示安装命令</p><p>然后执行<span style=\"color: rgb(199, 37, 78); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14.4px; background-color: rgb(249, 242, 244);\">sudo apt-get install libpcre3-dev</span></p><p><br/></p><p>最后再次执行pecl install swoole</p><p><span style=\"color: rgb(199, 37, 78); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14.4px; background-color: rgb(249, 242, 244);\"><br/></span></p><p><span style=\"color: rgb(199, 37, 78); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14.4px; background-color: rgb(249, 242, 244);\"><br/></span></p><p><span style=\"color:#c7254e;font-family:Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"font-size: 14.4px; background-color: rgb(249, 242, 244);\">更新: 2019/5/30 | 8:42 还是没有装上，说是少了phpize,Linux又太菜了，求大神解答</span></span></p>', '2', '1559121941', '1559176979', '2019.05', 4, 1);
INSERT INTO `b_article` VALUES (24, 'php将指定日期转换成时间戳', 1, 'xk', '23', 'php', '<p>代码如下：</p><p><br/></p><p><span style=\"color: rgb(51, 51, 51); font-family: &quot;PingFang SC&quot;, &quot;Lantinghei SC&quot;, &quot;Microsoft YaHei&quot;, arial, 宋体, sans-serif, tahoma; background-color: rgb(255, 255, 255);\">strtotime</span>(&#39;20190520 13:14:01&#39;);</p>', '2', '1558329241', NULL, '2019.05', 2, 1);

-- ----------------------------
-- Table structure for b_category
-- ----------------------------
DROP TABLE IF EXISTS `b_category`;
CREATE TABLE `b_category`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 35 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of b_category
-- ----------------------------
INSERT INTO `b_category` VALUES (2, 0, '编程语言');
INSERT INTO `b_category` VALUES (3, 0, '服务器');
INSERT INTO `b_category` VALUES (26, 1, '协议');
INSERT INTO `b_category` VALUES (5, 0, '算法');
INSERT INTO `b_category` VALUES (24, 2, 'go');
INSERT INTO `b_category` VALUES (25, 1, '工具');
INSERT INTO `b_category` VALUES (1, 0, '网络');
INSERT INTO `b_category` VALUES (23, 2, 'php');
INSERT INTO `b_category` VALUES (22, 0, '安全');
INSERT INTO `b_category` VALUES (27, 3, 'apache');
INSERT INTO `b_category` VALUES (30, 5, '字符串');
INSERT INTO `b_category` VALUES (31, 22, '安全工具');
INSERT INTO `b_category` VALUES (32, 5, '链表');
INSERT INTO `b_category` VALUES (33, 0, '测试测试');
INSERT INTO `b_category` VALUES (34, 33, '啦啦啦');

-- ----------------------------
-- Table structure for b_tag
-- ----------------------------
DROP TABLE IF EXISTS `b_tag`;
CREATE TABLE `b_tag`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tagName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `list` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of b_tag
-- ----------------------------
INSERT INTO `b_tag` VALUES (1, '新闻', NULL);
INSERT INTO `b_tag` VALUES (2, '学习', NULL);
INSERT INTO `b_tag` VALUES (3, '娱乐', NULL);
INSERT INTO `b_tag` VALUES (5, '生活', NULL);

-- ----------------------------
-- Table structure for b_user
-- ----------------------------
DROP TABLE IF EXISTS `b_user`;
CREATE TABLE `b_user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `status` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of b_user
-- ----------------------------
INSERT INTO `b_user` VALUES (1, 'xk', '123', '1');

-- ----------------------------
-- Table structure for common
-- ----------------------------
DROP TABLE IF EXISTS `common`;
CREATE TABLE `common`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `time` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `location` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `status` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '1',
  `article_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of common
-- ----------------------------
INSERT INTO `common` VALUES (11, '挺好的', '2019-05-30 14:57:25', '39.176.195.81', '江西省 移动', '1', 20);
INSERT INTO `common` VALUES (10, '测试评论测试', '2019-05-30 14:56:02', '39.176.195.81', '江西省 江西师范大学', '1', 20);
INSERT INTO `common` VALUES (12, '这个颜色可还行', '2019-05-30 15:01:24', '39.176.195.81', '江西省 移动', '1', 22);
INSERT INTO `common` VALUES (13, '写的真好', '2019-05-30 15:03:33', '39.176.195.81', '江西省 移动', '1', 19);
INSERT INTO `common` VALUES (14, '测试吃', '2019-05-30 15:04:46', '39.176.195.81', '江西省 移动', '1', 19);

SET FOREIGN_KEY_CHECKS = 1;
